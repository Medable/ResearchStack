apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'maven'

android {

    compileSdkVersion 25
    buildToolsVersion "26.0.3"

    libraryVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = new File(output.outputFile.parentFile,
                    output.outputFile.name.replace(".aar", "_v${defaultConfig.versionName}.aar"));
        }
    }

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 22
        versionCode 6
        versionName "1.0.5"
    }

    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    resourcePrefix 'rss_'
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar', '*.so'])
    compile 'com.cronutils:cron-utils:3.1.2'
    compile project(':backbone')
    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.0'
    testCompile 'org.mockito:mockito-core:1.10.19'
    compile 'com.squareup.retrofit2:retrofit:2.0.0-beta3'
    compile 'com.squareup.retrofit2:converter-gson:2.0.0-beta3'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.0.0-beta3'
    compile 'com.squareup.okhttp3:logging-interceptor:3.0.0-RC1'

}

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        failOnError false
        source = android.sourceSets.main.java.srcDirs
    }

    afterEvaluate {
        javadoc.classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        javadoc.classpath += files(android.libraryVariants.collect { variant ->
            variant.javaCompile.classpath.files
        })
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {

                pom.groupId = RS_POM_GROUP
                pom.artifactId = project.getProperties().SK_POM_ARTIFACT_ID
                pom.version = android.defaultConfig.versionName

                def deployPath = file('./')
                repository(url: "file://${deployPath.absolutePath}/../../Android-SDK/")

                pom.project {
                    name project.getProperties().SK_POM_NAME
                    packaging project.getProperties().SK_POM_PACKAGING
                    description RS_POM_DESCRIPTION

                    licenses {
                        license {
                            name RS_POM_LICENCE_NAME
                            url RS_POM_LICENCE_URL
                            distribution RS_POM_LICENCE_DIST
                        }
                    }
                }

                pom.whenConfigured { pom ->
                    pom.dependencies.forEach { dep ->
                        if (dep.getVersion() == "unspecified") {
                            dep.setGroupId(RS_POM_GROUP)
                            dep.setVersion(android.defaultConfig.versionName)
                        }
                    }
                }

            }
        }
    }
}
buildscript {
    repositories {
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
    }
}
